{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/component/list-contacts/list-contacts.component.ts","./src/app/component/list-contacts/list-contacts.component.html","./src/app/component/list-contacts/search-panel/search-panel.component.ts","./src/app/component/list-contacts/search-panel/search-panel.component.html","./src/app/component/main-chat/main-bottom/main-bottom.component.ts","./src/app/component/main-chat/main-bottom/main-bottom.component.html","./src/app/component/main-chat/main-chat.component.ts","./src/app/component/main-chat/main-chat.component.html","./src/app/component/main-chat/main-top/main-top.component.ts","./src/app/component/main-chat/main-top/main-top.component.html","./src/app/truncate-text.pipe.ts","./src/environments/environment.ts","./src/main.ts","./src/service/apianswer.service.ts","./src/service/data.service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// ngOnInit() this method reads data from DataService\r\n// getNewMessage() this method adds new messages to JSON\r\n// selectContact() this method sends the selected contact from the list.contacts.component to the main-chatcomponent\r\n// sortForDate() this method makes sorting contacts by date\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { DataService } from 'src/service/data.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n  public contacts: any[];\r\n\r\n  sentSelectContactToMainChatComponent: any;\r\n\r\n  constructor(private DataService: DataService) { }\r\n  selectContact(increased: any) {\r\n    this.sentSelectContactToMainChatComponent = increased\r\n  }\r\n  getNewMessage(event) {\r\n    const currentId = this.sentSelectContactToMainChatComponent.id;\r\n    for (const key of this.contacts) {\r\n      if (key.id == currentId) {\r\n        key.messagesHistory.push(event);\r\n        this.sortForDate(this.contacts)\r\n      }\r\n    }\r\n  }\r\n  sortForDate(items) {\r\n    items.sort((a, b) => {\r\n      let dateA: any = new Date(a.messagesHistory[a.messagesHistory.length - 1].date),\r\n        dateB: any = new Date(b.messagesHistory[b.messagesHistory.length - 1].date);\r\n      return dateB - dateA\r\n    })\r\n  }\r\n  ngOnInit() {\r\n    this.DataService.getDate()\r\n      .subscribe(data => {\r\n        this.sortForDate(data);\r\n        console.log(data);\r\n        this.contacts = data;\r\n        this.sentSelectContactToMainChatComponent = this.contacts[0];\r\n        return this.contacts;\r\n      });\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <div class=\"container\">\r\n    <app-list-contacts [contacts]=\"contacts\" (selectCont)=\"selectContact($event)\" class=\"leftPanel\"></app-list-contacts>\r\n    <app-main-chat class=\"rightPanel\" [contacts]=\"contacts\" (newMessage)=\"getNewMessage($event)\"\r\n      [selectContact]=\"sentSelectContactToMainChatComponent\">\r\n    </app-main-chat>\r\n  </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ListContactsComponent } from './component/list-contacts/list-contacts.component';\r\nimport { MainChatComponent } from './component/main-chat/main-chat.component';\r\nimport { SearchPanelComponent } from './component/list-contacts/search-panel/search-panel.component';\r\nimport { MainTopComponent } from './component/main-chat/main-top/main-top.component';\r\nimport { MainBottomComponent } from './component/main-chat/main-bottom/main-bottom.component';\r\nimport { TruncateTextPipe } from './truncate-text.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ListContactsComponent,\r\n    MainChatComponent,\r\n    SearchPanelComponent,\r\n    MainTopComponent,\r\n    MainBottomComponent,\r\n    TruncateTextPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// setSearchMethod() is a method that searches the contact list\r\n// selectContact()   this is a method that selects a contact and sends it to the app.component\r\n//                   and then to the main.chat.component\r\n// \r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list-contacts',\r\n  templateUrl: './list-contacts.component.html',\r\n  styleUrls: ['./list-contacts.component.css']\r\n})\r\n\r\nexport class ListContactsComponent implements OnInit {\r\n\r\n  @Input() contacts: any[];\r\n  @Output() selectCont = new EventEmitter<any>();\r\n\r\n  viewContacts: any = false;\r\n  dontFoundContacts: boolean = false;\r\n  searchEnter: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  setSearchMethod(event) {\r\n    this.dontFoundContacts = true;\r\n    this.viewContacts = []\r\n    if (event == \"\") this.dontFoundContacts = false;\r\n    for (const key of this.contacts) {\r\n      if (key.name.search(event) != -1) {\r\n        this.dontFoundContacts = false;\r\n        this.viewContacts.push(key);\r\n      }\r\n      else {\r\n        this.searchEnter = event;\r\n      }\r\n    }\r\n  }\r\n  selectContact(increased: any, event) {\r\n    let allActiveClassCss = document.querySelectorAll(\".active\");\r\n    event.currentTarget.classList.add('active');\r\n    if (allActiveClassCss[0] != undefined)\r\n      allActiveClassCss[0].classList.remove('active');\r\n    this.selectCont.emit(increased);\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n}\r\n","<section>\r\n  <app-search-panel (setSearch)=\"setSearchMethod($event)\"></app-search-panel>\r\n  <div class=\"contacts\">\r\n    <h2>Chats</h2>\r\n    <div class=\"listContacts\">\r\n      <div *ngIf=\"!dontFoundContacts\">\r\n        <div *ngIf=\"!viewContacts\">\r\n          <div class=\"person\" (click)=\"selectContact(item, $event)\" *ngFor=\"let item of contacts\">\r\n            <div class=\"avatar\">\r\n              <img src=\"assets/{{item.avatar}}\" alt=\"avatar\">\r\n              <i *ngIf=\"item.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n              <i *ngIf=\"item.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n            </div>\r\n            <div class=\"info\">\r\n              <h3>{{item.name}}</h3>\r\n              <span\r\n                class=\"message\">{{item.messagesHistory[item.messagesHistory.length-1].message | truncateText:28}}</span>\r\n            </div>\r\n            <div class=\"date\">\r\n              <span>{{item.messagesHistory[item.messagesHistory.length-1].date | date:'mediumDate'}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"viewContacts\">\r\n          <div class=\"person\" (click)=\"selectContact(item, $event)\" *ngFor=\"let item of viewContacts\">\r\n            <div class=\"avatar\">\r\n              <img src=\"assets/{{item.avatar}}\" alt=\"avatar\">\r\n              <i *ngIf=\"item.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n              <i *ngIf=\"item.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n            </div>\r\n            <div class=\"info\">\r\n              <h3>{{item.name}}</h3>\r\n              <span class=\"message\"\r\n                *ngIf=\"item.messagesHistory[0]!= '' \">{{item.messagesHistory[item.messagesHistory.length-1].message | truncateText:28}}</span>\r\n            </div>\r\n            <div class=\"date\">\r\n              <span\r\n                *ngIf=\"item.messagesHistory[0]!= '' \">{{item.messagesHistory[item.messagesHistory.length-1].date | date:'mediumDate'}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"dontFoundContacts\">\r\n        <p class=\"dontFoundContacts\">Sorry, no contact was found! </p>\r\n        <p class=\"dontFoundContacts\"> Check spelling - {{searchEnter}}</p>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</section>","// setSearchMethod() - is a method that sends the input value to the parent component\r\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-search-panel',\r\n  templateUrl: './search-panel.component.html',\r\n  styleUrls: ['./search-panel.component.css']\r\n})\r\n\r\nexport class SearchPanelComponent implements OnInit {\r\n\r\n  @Output() setSearch = new EventEmitter<string>();\r\n  search: string;\r\n  setSearchMethod(search) {\r\n    this.setSearch.emit(search);\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n}\r\n","<section class=\"searchPane\">\r\n  <div class=\"container\">\r\n    <div class=\"aboutUser\">\r\n      <img src=\"assets/img/myAvatar.png\" class=\"userAvatar\" alt=\"User Avatar\">\r\n      <i class=\"far fa-check-circle status\"></i>\r\n    </div>\r\n    <div class=\"search\">\r\n      <i class=\"fas fa-search\"></i>\r\n      <input type=\"search\" [(ngModel)]=\"search\" (ngModelChange)=\"setSearchMethod(search)\" name=\"search\"\r\n        placeholder=\"Search or start new chat\">\r\n    </div>\r\n  </div>\r\n</section>","//SendEnter() this method sends the data entered from the textarea to the main chat component. Makes when you press Enter\r\n// Send() this method sends the data entered from the textarea to the main chat component. Makes when you click on the icon\r\n// validation() this method corresponds to the validation of textarea\r\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-bottom',\r\n  templateUrl: './main-bottom.component.html',\r\n  styleUrls: ['./main-bottom.component.css']\r\n})\r\nexport class MainBottomComponent implements OnInit {\r\n  @Output() values = new EventEmitter<string>();\r\n  constructor() { }\r\n  SendEnter(text, event) {\r\n    let valid = this.validation(text);\r\n    if (event.key == \"Enter\") {\r\n      if (valid) {\r\n        this.values.emit(text.trim());\r\n      }\r\n      event.target.value = \"\";\r\n    }\r\n  }\r\n  validation(text) {\r\n    if (text.trim() == \"\") {\r\n      return false;\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  Send(text, event) {\r\n    let valid = this.validation(text);\r\n    if (valid) {\r\n      this.values.emit(text.trim());\r\n    }\r\n    event.value = \"\";\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"mainBottom\">\r\n  <textarea placeholder=\"Type your message\" #textarea (keyup.enter)=\"SendEnter(textarea.value, $event)\"></textarea>\r\n  <i (click)=\"Send(textarea.value, textarea)\" class=\"far fa-paper-plane\"></i>\r\n</div>","// generateAnswerMessage () - this is a method that gets answers from the API\r\n// getNewMessage() - is a method that composes new messages.\r\n//                    Accepts parameters:\r\n//                        increased - The text of the message comes from the main-bottom.component.\r\n//                        senderArg - Sender (two options or \"me\" or \"his\").\r\n//                        screenScrollBottom - an element of \"content\" - which is required for automatic scrolling \r\n//                        to the bottom\r\n// ngOnInit()  is a method that appeals to APIAnswerService to retrieve data for a response\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { APIAnswerService } from 'src/service/apianswer.service';\r\n\r\n@Component({\r\n  selector: 'app-main-chat',\r\n  templateUrl: './main-chat.component.html',\r\n  styleUrls: ['./main-chat.component.css']\r\n})\r\nexport class MainChatComponent implements OnInit {\r\n  @Input() selectContact: any;\r\n  @Input() contacts: any[];\r\n  @Output() newMessage = new EventEmitter<object>();\r\n  private _url = 'https://api.chucknorris.io/jokes/random';\r\n  public answer: any;\r\n\r\n\r\n  getNewMessage(increased: string, senderArg, screenScrollBottom) {\r\n    this.generateAnswerMessage();\r\n    let date = new Date();\r\n    let sender: string = senderArg;\r\n    let newMessages = {\r\n      message: increased,\r\n      sender: sender,\r\n      date: date,\r\n    }\r\n    this.newMessage.emit(newMessages);\r\n    if (senderArg == 'his') {\r\n      setTimeout(() => { screenScrollBottom.scrollTop = screenScrollBottom.scrollHeight }, 100);\r\n      return true;\r\n    }\r\n    else {\r\n      this.getNewMessage(this.answer.value, \"his\", screenScrollBottom);\r\n    }\r\n  }\r\n\r\n  generateAnswerMessage() {\r\n    fetch(this._url)\r\n      .then(data => {\r\n        data.json()\r\n          .then(data => this.answer = data)\r\n      })\r\n  }\r\n\r\n  constructor(private APIAnswerService: APIAnswerService) { }\r\n\r\n  ngOnInit() {\r\n    this.APIAnswerService.getAnswer()\r\n      .subscribe(data => {\r\n        return this.answer = data;\r\n      });\r\n  }\r\n}\r\n","<section class=\"mainContant\">\r\n  <app-main-top [selectContact]=\"selectContact\"></app-main-top>\r\n  <div #contant class=\"contant\">\r\n    <div *ngFor=\"let item of selectContact.messagesHistory\">\r\n      <div *ngIf=\"item.message == '' \">\r\n        <p class=\"withoutTalking\">Write him something</p>\r\n      </div>\r\n      <div *ngIf=\"item.message != '' \">\r\n        <div class=\"message his\" *ngIf=\"item.sender == 'his'\">\r\n          <div class=\"flexContainer\">\r\n            <img src=\"assets/{{selectContact.avatar}}\" class=\"avatar\" alt=\"avatar\">\r\n            <p class=\"text\">{{item.message}}</p>\r\n          </div>\r\n          <span class=\"dateTime\">\r\n            <span class=\"date\">{{item.date | date:'short'}}</span>\r\n          </span>\r\n        </div>\r\n        <div class=\"message my\" *ngIf=\"item.sender == 'me'\">\r\n          <div class=\"flexContainer\">\r\n            <p class=\"text\">{{item.message}}</p>\r\n          </div>\r\n          <span class=\"dateTime\">\r\n            <span class=\"date\">{{item.date | date:'short'}}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-main-bottom (values)=\"getNewMessage($event, 'me', contant)\"></app-main-bottom>\r\n</section>","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-top',\r\n  templateUrl: './main-top.component.html',\r\n  styleUrls: ['./main-top.component.css']\r\n})\r\nexport class MainTopComponent implements OnInit {\r\n  @Input() selectContact:any;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"mainTop\">\r\n  <div class=\"avatar\">\r\n    <img src=\"assets/{{selectContact.avatar}}\" alt=\"avatar\">\r\n    <i *ngIf=\"selectContact.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n    <i *ngIf=\"selectContact.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n  </div>\r\n  <h2>{{selectContact.name}}</h2>\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncateText'\n})\nexport class TruncateTextPipe implements PipeTransform {\n\n  transform(value: string, length: number): string {\n    const biggestWord = 50;\n    const elipses = \"...\";\n\n    if (typeof value === \"undefined\") return value;\n    if (value.length <= length) return value;\n\n    //.. truncate to about correct lenght\n    let truncatedText = value.slice(0, length + biggestWord);\n\n    //.. now nibble ends till correct length\n    while (truncatedText.length > length - elipses.length) {\n\n      let lastSpace = truncatedText.lastIndexOf(\" \");\n      if (lastSpace === -1) break;\n      truncatedText = truncatedText.slice(0, lastSpace).replace(/[!,.?;:]$/, '');\n\n    };\n\n    return truncatedText + elipses;\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { APIAnswer } from 'src/app/apianswer';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIAnswerService {\n  private _url = 'https://api.chucknorris.io/jokes/random';\n\n  constructor(private http: HttpClient) { }\n\n  getAnswer(): Observable<APIAnswer[]> {\n    return this.http.get<APIAnswer[]>(this._url);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Data } from 'src/app/data';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  private _url = \"assets/data.json\";\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getDate():Observable<Data[]>{\r\n    return this.http.get<Data[]>(this._url);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}