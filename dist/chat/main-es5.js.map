{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/component/list-contacts/list-contacts.component.ts","webpack:///src/app/component/list-contacts/list-contacts.component.html","webpack:///src/app/component/list-contacts/search-panel/search-panel.component.ts","webpack:///src/app/component/list-contacts/search-panel/search-panel.component.html","webpack:///src/app/component/main-chat/main-bottom/main-bottom.component.ts","webpack:///src/app/component/main-chat/main-bottom/main-bottom.component.html","webpack:///src/app/component/main-chat/main-chat.component.ts","webpack:///src/app/component/main-chat/main-chat.component.html","webpack:///src/app/component/main-chat/main-top/main-top.component.ts","webpack:///src/app/component/main-chat/main-top/main-top.component.html","webpack:///src/app/truncate-text.pipe.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/service/apianswer.service.ts","webpack:///src/service/data.service.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","DataService","increased","sentSelectContactToMainChatComponent","event","currentId","contacts","key","messagesHistory","push","sortForDate","items","sort","a","b","dateA","Date","length","date","dateB","getDate","subscribe","data","console","log","selectContact","getNewMessage","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","ListContactsComponent","selectCont","viewContacts","dontFoundContacts","searchEnter","name","search","allActiveClassCss","document","querySelectorAll","currentTarget","classList","add","undefined","remove","emit","setSearchMethod","SearchPanelComponent","setSearch","MainBottomComponent","values","text","valid","validation","trim","target","value","SendEnter","Send","MainChatComponent","APIAnswerService","newMessage","_url","senderArg","screenScrollBottom","generateAnswerMessage","sender","newMessages","message","setTimeout","scrollTop","scrollHeight","answer","fetch","json","getAnswer","MainTopComponent","TruncateTextPipe","biggestWord","elipses","truncatedText","slice","lastSpace","lastIndexOf","replace","environment","production","bootstrapModule","err","error","http","get","providedIn"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","// ngOnInit() this method reads data from DataService\r\n// getNewMessage() this method adds new messages to JSON\r\n// selectContact() this method sends the selected contact from the list.contacts.component to the main-chatcomponent\r\n// sortForDate() this method makes sorting contacts by date\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { DataService } from 'src/service/data.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n  public contacts: any[];\r\n\r\n  sentSelectContactToMainChatComponent: any;\r\n\r\n  constructor(private DataService: DataService) { }\r\n  selectContact(increased: any) {\r\n    this.sentSelectContactToMainChatComponent = increased\r\n  }\r\n  getNewMessage(event) {\r\n    const currentId = this.sentSelectContactToMainChatComponent.id;\r\n    for (const key of this.contacts) {\r\n      if (key.id == currentId) {\r\n        key.messagesHistory.push(event);\r\n        this.sortForDate(this.contacts)\r\n      }\r\n    }\r\n  }\r\n  sortForDate(items) {\r\n    items.sort((a, b) => {\r\n      let dateA: any = new Date(a.messagesHistory[a.messagesHistory.length - 1].date),\r\n        dateB: any = new Date(b.messagesHistory[b.messagesHistory.length - 1].date);\r\n      return dateB - dateA\r\n    })\r\n  }\r\n  ngOnInit() {\r\n    this.DataService.getDate()\r\n      .subscribe(data => {\r\n        this.sortForDate(data);\r\n        console.log(data);\r\n        this.contacts = data;\r\n        this.sentSelectContactToMainChatComponent = this.contacts[0];\r\n        return this.contacts;\r\n      });\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <div class=\"container\">\r\n    <app-list-contacts [contacts]=\"contacts\" (selectCont)=\"selectContact($event)\" class=\"leftPanel\"></app-list-contacts>\r\n    <app-main-chat class=\"rightPanel\" [contacts]=\"contacts\" (newMessage)=\"getNewMessage($event)\"\r\n      [selectContact]=\"sentSelectContactToMainChatComponent\">\r\n    </app-main-chat>\r\n  </div>\r\n</div>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ListContactsComponent } from './component/list-contacts/list-contacts.component';\r\nimport { MainChatComponent } from './component/main-chat/main-chat.component';\r\nimport { SearchPanelComponent } from './component/list-contacts/search-panel/search-panel.component';\r\nimport { MainTopComponent } from './component/main-chat/main-top/main-top.component';\r\nimport { MainBottomComponent } from './component/main-chat/main-bottom/main-bottom.component';\r\nimport { TruncateTextPipe } from './truncate-text.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ListContactsComponent,\r\n    MainChatComponent,\r\n    SearchPanelComponent,\r\n    MainTopComponent,\r\n    MainBottomComponent,\r\n    TruncateTextPipe\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// setSearchMethod() is a method that searches the contact list\r\n// selectContact()   this is a method that selects a contact and sends it to the app.component\r\n//                   and then to the main.chat.component\r\n// \r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list-contacts',\r\n  templateUrl: './list-contacts.component.html',\r\n  styleUrls: ['./list-contacts.component.css']\r\n})\r\n\r\nexport class ListContactsComponent implements OnInit {\r\n\r\n  @Input() contacts: any[];\r\n  @Output() selectCont = new EventEmitter<any>();\r\n\r\n  viewContacts: any = false;\r\n  dontFoundContacts: boolean = false;\r\n  searchEnter: string = \"\";\r\n\r\n  constructor() { }\r\n\r\n  setSearchMethod(event) {\r\n    this.dontFoundContacts = true;\r\n    this.viewContacts = []\r\n    if (event == \"\") this.dontFoundContacts = false;\r\n    for (const key of this.contacts) {\r\n      if (key.name.search(event) != -1) {\r\n        this.dontFoundContacts = false;\r\n        this.viewContacts.push(key);\r\n      }\r\n      else {\r\n        this.searchEnter = event;\r\n      }\r\n    }\r\n  }\r\n  selectContact(increased: any, event) {\r\n    let allActiveClassCss = document.querySelectorAll(\".active\");\r\n    event.currentTarget.classList.add('active');\r\n    if (allActiveClassCss[0] != undefined)\r\n      allActiveClassCss[0].classList.remove('active');\r\n    this.selectCont.emit(increased);\r\n  }\r\n\r\n  ngOnInit() { }\r\n\r\n}\r\n","<section>\r\n  <app-search-panel (setSearch)=\"setSearchMethod($event)\"></app-search-panel>\r\n  <div class=\"contacts\">\r\n    <h2>Chats</h2>\r\n    <div class=\"listContacts\">\r\n      <div *ngIf=\"!dontFoundContacts\">\r\n        <div *ngIf=\"!viewContacts\">\r\n          <div class=\"person\" (click)=\"selectContact(item, $event)\" *ngFor=\"let item of contacts\">\r\n            <div class=\"avatar\">\r\n              <img src=\"assets/{{item.avatar}}\" alt=\"avatar\">\r\n              <i *ngIf=\"item.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n              <i *ngIf=\"item.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n            </div>\r\n            <div class=\"info\">\r\n              <h3>{{item.name}}</h3>\r\n              <span\r\n                class=\"message\">{{item.messagesHistory[item.messagesHistory.length-1].message | truncateText:28}}</span>\r\n            </div>\r\n            <div class=\"date\">\r\n              <span>{{item.messagesHistory[item.messagesHistory.length-1].date | date:'mediumDate'}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"viewContacts\">\r\n          <div class=\"person\" (click)=\"selectContact(item, $event)\" *ngFor=\"let item of viewContacts\">\r\n            <div class=\"avatar\">\r\n              <img src=\"assets/{{item.avatar}}\" alt=\"avatar\">\r\n              <i *ngIf=\"item.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n              <i *ngIf=\"item.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n            </div>\r\n            <div class=\"info\">\r\n              <h3>{{item.name}}</h3>\r\n              <span class=\"message\"\r\n                *ngIf=\"item.messagesHistory[0]!= '' \">{{item.messagesHistory[item.messagesHistory.length-1].message | truncateText:28}}</span>\r\n            </div>\r\n            <div class=\"date\">\r\n              <span\r\n                *ngIf=\"item.messagesHistory[0]!= '' \">{{item.messagesHistory[item.messagesHistory.length-1].date | date:'mediumDate'}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"dontFoundContacts\">\r\n        <p class=\"dontFoundContacts\">Sorry, no contact was found! </p>\r\n        <p class=\"dontFoundContacts\"> Check spelling - {{searchEnter}}</p>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</section>","// setSearchMethod() - is a method that sends the input value to the parent component\r\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-search-panel',\r\n  templateUrl: './search-panel.component.html',\r\n  styleUrls: ['./search-panel.component.css']\r\n})\r\n\r\nexport class SearchPanelComponent implements OnInit {\r\n\r\n  @Output() setSearch = new EventEmitter<string>();\r\n  search: string;\r\n  setSearchMethod(search) {\r\n    this.setSearch.emit(search);\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n\r\n}\r\n","<section class=\"searchPane\">\r\n  <div class=\"container\">\r\n    <div class=\"aboutUser\">\r\n      <img src=\"assets/img/myAvatar.png\" class=\"userAvatar\" alt=\"User Avatar\">\r\n      <i class=\"far fa-check-circle status\"></i>\r\n    </div>\r\n    <div class=\"search\">\r\n      <i class=\"fas fa-search\"></i>\r\n      <input type=\"search\" [(ngModel)]=\"search\" (ngModelChange)=\"setSearchMethod(search)\" name=\"search\"\r\n        placeholder=\"Search or start new chat\">\r\n    </div>\r\n  </div>\r\n</section>","//SendEnter() this method sends the data entered from the textarea to the main chat component. Makes when you press Enter\r\n// Send() this method sends the data entered from the textarea to the main chat component. Makes when you click on the icon\r\n// validation() this method corresponds to the validation of textarea\r\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-bottom',\r\n  templateUrl: './main-bottom.component.html',\r\n  styleUrls: ['./main-bottom.component.css']\r\n})\r\nexport class MainBottomComponent implements OnInit {\r\n  @Output() values = new EventEmitter<string>();\r\n  constructor() { }\r\n  SendEnter(text, event) {\r\n    let valid = this.validation(text);\r\n    if (event.key == \"Enter\") {\r\n      if (valid) {\r\n        this.values.emit(text.trim());\r\n      }\r\n      event.target.value = \"\";\r\n    }\r\n  }\r\n  validation(text) {\r\n    if (text.trim() == \"\") {\r\n      return false;\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  Send(text, event) {\r\n    let valid = this.validation(text);\r\n    if (valid) {\r\n      this.values.emit(text.trim());\r\n    }\r\n    event.value = \"\";\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"mainBottom\">\r\n  <textarea placeholder=\"Type your message\" #textarea (keyup.enter)=\"SendEnter(textarea.value, $event)\"></textarea>\r\n  <i (click)=\"Send(textarea.value, textarea)\" class=\"far fa-paper-plane\"></i>\r\n</div>","// generateAnswerMessage () - this is a method that gets answers from the API\r\n// getNewMessage() - is a method that composes new messages.\r\n//                    Accepts parameters:\r\n//                        increased - The text of the message comes from the main-bottom.component.\r\n//                        senderArg - Sender (two options or \"me\" or \"his\").\r\n//                        screenScrollBottom - an element of \"content\" - which is required for automatic scrolling \r\n//                        to the bottom\r\n// ngOnInit()  is a method that appeals to APIAnswerService to retrieve data for a response\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { APIAnswerService } from 'src/service/apianswer.service';\r\n\r\n@Component({\r\n  selector: 'app-main-chat',\r\n  templateUrl: './main-chat.component.html',\r\n  styleUrls: ['./main-chat.component.css']\r\n})\r\nexport class MainChatComponent implements OnInit {\r\n  @Input() selectContact: any;\r\n  @Input() contacts: any[];\r\n  @Output() newMessage = new EventEmitter<object>();\r\n  private _url = 'https://api.chucknorris.io/jokes/random';\r\n  public answer: any;\r\n\r\n\r\n  getNewMessage(increased: string, senderArg, screenScrollBottom) {\r\n    this.generateAnswerMessage();\r\n    let date = new Date();\r\n    let sender: string = senderArg;\r\n    let newMessages = {\r\n      message: increased,\r\n      sender: sender,\r\n      date: date,\r\n    }\r\n    this.newMessage.emit(newMessages);\r\n    if (senderArg == 'his') {\r\n      setTimeout(() => { screenScrollBottom.scrollTop = screenScrollBottom.scrollHeight }, 100);\r\n      return true;\r\n    }\r\n    else {\r\n      this.getNewMessage(this.answer.value, \"his\", screenScrollBottom);\r\n    }\r\n  }\r\n\r\n  generateAnswerMessage() {\r\n    fetch(this._url)\r\n      .then(data => {\r\n        data.json()\r\n          .then(data => this.answer = data)\r\n      })\r\n  }\r\n\r\n  constructor(private APIAnswerService: APIAnswerService) { }\r\n\r\n  ngOnInit() {\r\n    this.APIAnswerService.getAnswer()\r\n      .subscribe(data => {\r\n        return this.answer = data;\r\n      });\r\n  }\r\n}\r\n","<section class=\"mainContant\">\r\n  <app-main-top [selectContact]=\"selectContact\"></app-main-top>\r\n  <div #contant class=\"contant\">\r\n    <div *ngFor=\"let item of selectContact.messagesHistory\">\r\n      <div *ngIf=\"item.message == '' \">\r\n        <p class=\"withoutTalking\">Write him something</p>\r\n      </div>\r\n      <div *ngIf=\"item.message != '' \">\r\n        <div class=\"message his\" *ngIf=\"item.sender == 'his'\">\r\n          <div class=\"flexContainer\">\r\n            <img src=\"assets/{{selectContact.avatar}}\" class=\"avatar\" alt=\"avatar\">\r\n            <p class=\"text\">{{item.message}}</p>\r\n          </div>\r\n          <span class=\"dateTime\">\r\n            <span class=\"date\">{{item.date | date:'short'}}</span>\r\n          </span>\r\n        </div>\r\n        <div class=\"message my\" *ngIf=\"item.sender == 'me'\">\r\n          <div class=\"flexContainer\">\r\n            <p class=\"text\">{{item.message}}</p>\r\n          </div>\r\n          <span class=\"dateTime\">\r\n            <span class=\"date\">{{item.date | date:'short'}}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-main-bottom (values)=\"getNewMessage($event, 'me', contant)\"></app-main-bottom>\r\n</section>","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-top',\r\n  templateUrl: './main-top.component.html',\r\n  styleUrls: ['./main-top.component.css']\r\n})\r\nexport class MainTopComponent implements OnInit {\r\n  @Input() selectContact:any;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<div class=\"mainTop\">\r\n  <div class=\"avatar\">\r\n    <img src=\"assets/{{selectContact.avatar}}\" alt=\"avatar\">\r\n    <i *ngIf=\"selectContact.status == 'online'\" class=\"far fa-check-circle status online\"></i>\r\n    <i *ngIf=\"selectContact.status == 'offline'\" class=\"fas fa-times-circle status offline\"></i>\r\n  </div>\r\n  <h2>{{selectContact.name}}</h2>\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'truncateText'\n})\nexport class TruncateTextPipe implements PipeTransform {\n\n  transform(value: string, length: number): string {\n    const biggestWord = 50;\n    const elipses = \"...\";\n\n    if (typeof value === \"undefined\") return value;\n    if (value.length <= length) return value;\n\n    //.. truncate to about correct lenght\n    let truncatedText = value.slice(0, length + biggestWord);\n\n    //.. now nibble ends till correct length\n    while (truncatedText.length > length - elipses.length) {\n\n      let lastSpace = truncatedText.lastIndexOf(\" \");\n      if (lastSpace === -1) break;\n      truncatedText = truncatedText.slice(0, lastSpace).replace(/[!,.?;:]$/, '');\n\n    };\n\n    return truncatedText + elipses;\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { APIAnswer } from 'src/app/apianswer';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class APIAnswerService {\n  private _url = 'https://api.chucknorris.io/jokes/random';\n\n  constructor(private http: HttpClient) { }\n\n  getAnswer(): Observable<APIAnswer[]> {\n    return this.http.get<APIAnswer[]>(this._url);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Data } from 'src/app/data';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n  private _url = \"assets/data.json\";\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getDate():Observable<Data[]>{\r\n    return this.http.get<Data[]>(this._url);\r\n  }\r\n}\r\n"]}